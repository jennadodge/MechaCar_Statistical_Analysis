plt <- ggplot(mpg,aes(y=hwy)) #import dataset into ggplot2
x <- 3
numlist <- c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
setwd("~/uofo-virt-data-pt-12-2021-u-b/Challenges/15-Statistics_R")
demo_table <- read.csv(file='Resources/demo.csv',check.names=F,stringsAsFactors = F)
demo_table2 <- fromJSON(txt='demo.json')
?fromJSON()
library(jsonlite)
demo_table2 <- fromJSON(txt='demo.json')
x <- c(3, 3, 2, 2, 5, 5, 8, 8, 9)
x[3]
demo_table[3,"Year"]
demo_table[3,3]
demo_table$"Vehicle_Class"
View(demo_table)
demo_table$"Vehicle_Class"[2]
filter_table <- demo_table2[demo_table2$price 10000,]
filter_table <- demo_table2[demo_table2$price >10000,]
filter_table2 <- subset(demo_table2, price > 10000 & drive == "4wd" & "clean" %in% title_status)
filter_table3 <- demo_table2[("clean" %in% demo_table2$title_status) & (demo_table2$price > 10000) & (demo_table2$drive == "4wd"),]
View(filter_table)
View(filter_table2)
View(filter_table3)
sample(c("cow", "deer", "pig", "chicken", "duck", "sheep", "dog"), 4)
num_rows <- 1:nrow(demo_table)
sample_rows <- sample(num_rows, 3)
demo_table[sample_rows,]
demo_table[sample(1:nrow(demo_table), 3),]
library(tidyverse)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer), .groups = 'keep') #
View(summarize_demo)
summarize_demo <- demo_table2 %>% group_by(condition) %>% summarize(Mean_Mileage=mean(odometer),Maximum_Price=max(price),Num_Vehicles=n(), .groups = 'keep')
View(summarize_demo)
demo_table3 <- read.csv('Resources/demo2.csv',check.names = F,stringsAsFactors = F)
long_table <- gather(demo_table3,key="Metric",value="Score",buying_price:popularity)
wide_table <- long_table %>% spread(key="Metric",value="Score")
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
plt <- ggplot(mpg,aes(y=hwy))
plt + geom_boxplot()
> plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy)) #import dataset into ggplot2
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1)) #add boxplot and rotate x-axis labels 45 degrees
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") +
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5))
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels > theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + #add heatmap with labels
theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot() +
theme(axis.text.x=element_text(angle=45,hjust=1)) +
geom_point()
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
?facet_wrap()
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
ggplot(mtcars,aes(x=wt)) + geom_density()
?shapiro.test()
shapiro.test(mtcars$wt)
?sample_n()
population_table <- read.csv('Resources/used_car_data.csv',check.names = F,stringsAsFactors = F)
View(population_table)
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
plt + geom_density(
plt + geom_density()
plt + geom_density()
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table, aes(x=log10(Miles_Drven)))
plt + geom_density()
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
?t.test()
t.test(log10(sample_table$Miles_Driven), mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50)
sample_table2 <- population_table %>% sample_n(50)
t.test(log10(sample_table$Miles_Driven), log10(sample_table2$Miles_Driven))
mpg_data <- read.csv('Resources/mpg_modified.csv')
mpg_1999 <- mpg_data %>% filter(year==1999)
mpg_2008 <- mpg_data %>% filter(year==2008)
t.test(mpg_1999$hwy, mpg_2008$hwy,paired = T)
?anov()
?aov()
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
aov(hp ~ cyl, data = mtcars_filt)
summary(aov(hp ~ cyl, data = mtcars_filt))
?cor()
head(mtcars)
plt <- ggplot(mtcars, aes(x=hp,y=qsec))
plt + geom_point()
cor(hp,qsec)
cor(mtcars$hp,mtcars$qsec)
used_cars = read.csv('Resources/used_car_data.csv',stringAsFactors=F)
used_cars <- read.csv('Resources/used_car_data.csv',stringAsFactors=F)
used_cars <- read.csv('Resources/used_car_data.csv',stringsAsFactors=F)
head(used_cars)
plt<- ggplot(used_cars, aes(x=Miles_driven, y=Selling_price))
plt + geom_point()
plt<- ggplot(used_cars, aes(x=Miles_driven, y=Selling_price))
plt + geom_point()
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
used_matric <- as.matric(used_cars[,c"Selling_Price","Present_Price","Miles_Driven"])
used_matric <- as.matrix(used_cars[,c"Selling_Price","Present_Price","Miles_Driven"])
used_matrix <- as.matrix(used_cars[,c"Selling_Price","Present_Price","Miles_Driven"])
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
?lm()
lm(qsec ~ hp, mtcars)
summary(lm(qsec ~ hp, mtcars))
model <- lm(qsec~hp, mtcars)
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
plt <- ggplot(mtcars, aes(x=hp, y=qsec))
plt + geom_point()+geom_line(aes(y=yvals), color = "red")
lm(qsec~ mpg + disp + drat + wt + hp,data=mtcars)
summary(lm(qsec~ mpg + disp + drat + wt + hp,data=mtcars))
?chisq.test
tbl <- table(mpg$class,mpg$year)
chisq.test(tbl)
library(dplyr)
?read.csv()
setwd("~/uofo-virt-data-pt-12-2021-u-b/Challenges/15-Statistics_R/MechaCar_Statistical_Analysis")
mechaCarTable <- read.csv('MechaCar_mpg.csv')
View(mechaCarTable)
?lm()
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechaCarTable)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechaCarTable))
cor(mechaCarTable$mpg,mechaCarTable$vehicle_length)
# read Suspension Coil CSV data
suspensionCoilTable <- read.csv('Suspension_Coil.csv')
View(suspensionCoilTable)
?group_by()
# create a total_summary dataframe to get the mean, median, variance, and std dev of the suspensiol coil PSI column
total_summary <- summarize(suspensionCoilTable)
View(total_summary)
?summarize()
# create a total_summary dataframe to get the mean, median, variance, and std dev of the suspensiol coil PSI column
total_summary <- suspensionCoilTable %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance =var(PSI), SD = sd(PSI))
View(total_summary)
# create a lot_summary dataframe to group each manufacturing lot by the mean, median, variance and std dev of PSI
lot_summary <- suspensionCoilTable %>% group_by(Manufacturing_Lot) %>% summarize(Mean = mean(PSI), Median = median(PSI), Variance =var(PSI), SD = sd(PSI))
View(lot_summary)
?t.test()
# Use a t-test to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1500 PSI
t.test(suspensionCoilTable$PSI)
# Use a t-test to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1500 PSI
t.test(suspensionCoilTable$PSI, 1500)
# Use a t-test to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1500 PSI
t.test(suspensionCoilTable$PSI, mu=1500)
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset= suspensionCoilTable$Manufacturing_Lot %in% c(1,3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot %in% c(1,3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot %in% c(1,3)))
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1),
+ subset(suspensionCoilTable$Manufacturing_Lot == 2), subset(suspensionCoilTable$Manufacturing_Lot == 3))
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1,
+ suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1, suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1)#, suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1))#, suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1), suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset(suspensionCoilTable$Manufacturing_Lot ==1, suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset=(suspensionCoilTable$Manufacturing_Lot ==1, suspensionCoilTable$Manufacturing_Lot == 2, suspensionCoilTable$Manufacturing_Lot == 3))
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == 1,]
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == 1,])
# Use a t-test to determine if the PSI for each manufacturing lot is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 1",])
# Use a t-test to determine if the PSI for each Lot 2 is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI, mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 2",])
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(suspensionCoilTable$PSI[suspensionCoilTable$Manufacturing_Lot == "Lot 1",], mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 1",])
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 1",]$PSI, mu=1500, subset=suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 1",])
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable,Manufacturing_Lot == "Lot 1")$PSI,  mu=1500)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot 1")$PSI,  mu=1500)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot 1")$PSI, mu=1500)
# Use a t-test to determine if the PSI across all manufacturing lots is statistically different from the population mean of 1500 PSI
t.test(suspensionCoilTable$PSI, mu=1500)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, suspensionCoilTable$Manufacturing_Lot=="Lot 1")$PSI, mu=1500)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
lot1 <- suspensionCoilTable[suspensionCoilTable$Manufacturing_Lot == "Lot 2",]
View(lot1)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot1")$PSI, mu=1500)
# Use a t-test to determine if the PSI for each Lot 2 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot2")$PSI, mu=1500)
# Use a t-test to determine if the PSI for each Lot 1 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot3")$PSI, mu=1500)
# Use a t-test to determine if the PSI for each Lot 3 is statistically different from the population mean of 1500
t.test(subset(suspensionCoilTable, Manufacturing_Lot=="Lot3")$PSI, mu=1500)
